#  WowOpenBox by MooreaTV moorea@ymail.com (c) 2020 All rights reserved
#  Open Source Software licensed under GPLv3 - No Warranty
#  (contact the author if you need a different license)
#
#  The GNU General Public License does not permit incorporating this work
#  into proprietary programs. 
#
#  Releases detail/changes are on https://github.com/WowOpenBox/WowOpenBox/releases
#
package require Tk
package require twapi
package require TclCurl
package require Tk

# -- UI
set vers "0.9.0"

proc Debug {msg} {
    global settings
    if {$settings(DEBUG)} {
        puts "DEBUG $msg"
    }
}

# Settings
# -- App utils - save settings
set app_dir [file dirname [file normalize [info script]]]

set SETTINGS_FILE [file join $app_dir "wowopenboxSettings.tcl"]

proc SaveSettings {args} {
    global SETTINGS_FILE settings
    Debug "Saving settings to $SETTINGS_FILE (from cb $args)"
    set f [open $SETTINGS_FILE w+]
    puts $f "array set settings {"
    foreach i [lsort [array names settings]] {
        #  Debug "saving $i \"$settings($i)\""
        puts $f "\t$i\t\"$settings($i)\""
    }
    puts $f "}"
    close $f
}

proc LoadSettings {} {
    global SETTINGS_FILE settings
    if {[winfo exists .b1]} {
        .b1 configure -text "Edit Settings" -command EditSettings
    }
    if {[catch {source $SETTINGS_FILE} err]} {
        puts stderr "Could not source $SETTINGS_FILE\n$err"
        return
    }
    twapi::register_hotkey $settings(hk,capture) CaptureOrUpdate
    twapi::register_hotkey $settings(hk,mouseTrack) StartStopMouseTrack
    # Set mouse control to current values
    global mouseFollow mouseRaise mouseDelay
    set mouseDelay [GetMouseDelay]
    set mouseFollow [GetFocusFollowMouse]
    set mouseRaise [GetMouseRaise]
    Debug "Settings (re)Loaded."
}


proc updateIndex {args} {
    global i maxI pos windowSize settings
    Debug "i is $i - args $args"
    if {[info exists settings($i,size)]} {
        set windowSize $settings($i,size)
        set pos $settings($i,posXY)
    } elseif {$i>1} {
        UpdatePos
    }
    if {$i<$maxI} {
        .l2 configure -text "Selected :"
        .b2 configure -text "Update"
    } else {
        .l2 configure -text "Next Wow :"
        .b2 configure -text "Capture"
    }
}

proc UISetup {} {
    global vers pos windowSize settings mouseFollow mouseRaise mouseDelay mouseCoords
    wm title . "WoW Open Box - Open Source Multiboxing"
    # Get logo
    #curl::transfer -url "https://www.wowopenbox.org/WoWOpenBox240.png?v=$vers" -bodyvar img240
    curl::transfer -url "https://www.wowopenbox.org/WoWOpenBox70.png?v=$vers" -bodyvar img70
    #set imgObj240 [image create photo -data $img240]
    set imgObj70 [image create photo -data $img70]
    wm iconphoto . -default $imgObj70
    grid [label .logo -image $imgObj70] -rowspan 3
    # grid [label .l1  -text "Main Menu"] -columnspan 2
    grid [button .bH -text "Help" -command Help]  -row 0 -column 1
    grid [button .b1  -text "Edit Settings" -command EditSettings]  -row 1 -column 1
    grid [button .bc -text "Debug Console" -command {ConsoleSetup; tkcon show}] -row 2 -column 1
    grid [label .l2 -text "Next Wow :"] [entry .e1 -textvariable i] -sticky e
    bind .e1 <FocusIn> [list focusIn %W]
    grid [label .l3 -text "Resize to "] [entry .e2 -textvariable windowSize] -sticky e
    grid [label .l4 -text "Move to "] [entry .e3 -textvariable pos] -sticky e
    grid [button .b2 -text "Capture" -command CaptureOrUpdate] -pady 5 -columnspan 2
    grid [listbox .lbw -height 6] -columnspan 2
    bind .lbw <<ListboxSelect>> [list selectChanged %W]
    grid [label .l6 -text "Mouse settings:"] -columnspan 2 -sticky w
    grid [checkbutton .mf -text "Focus follows mouse" -variable mouseFollow -command UpdateMouseFollow] -columnspan 2 -sticky w
    grid [checkbutton .mr -text "Mouse auto raises windows" -variable mouseRaise -command UpdateMouseRaise] -columnspan 2 -sticky w
    grid [label .lmd -text "Delay (ms)"] [entry .emd -textvariable mouseDelay] -sticky w
    bind .emd <Return> UpdateMouseDelay
    grid [button .bml -text "Track mouse" -command StartStopMouseTrack] [entry .emt -textvariable mouseCoords] -sticky w
    grid [label .l_bottom -text "(c) 2020 MooreaTv <moorea@ymail.com>"] -columnspan 2
}


proc mouseTrack {} {
    global mouseTrackOn mouseCoords
    set mouseCoords [twapi::get_mouse_location]
    set mouseTrackOn [after 100 mouseTrack]
}

proc StartStopMouseTrack {} {
    global mouseTrackOn
    if {$mouseTrackOn != ""} {
        Debug "Stopping mouse tracking"
        . configure -cursor arrow
        after cancel $mouseTrackOn
        set mouseTrackOn ""
        .bml configure -text "Track mouse"
    } else {
        Debug "Starting mouse tracking"
        . configure -cursor crosshair
        mouseTrack
        .bml configure -text "Stop tracking"
    }
}

proc focusIn {w args} {
    Debug "got focusIn $w $args"
    if {[.lbw curselection]==""} {
        # only reset if there was a selection otherwise changing windows
        # top window clears it
        return
    }
    .lbw selection clear 0 end
    selectChanged .lbw "from focus $w"
}

proc selectChanged {w args} {
    global i maxI ww
    set sel [$w curselection]
    Debug "got selectChanged $w $args: $sel - i $i max $maxI"
    if {$sel == "" } {
        set i $maxI
    } else {
        set i [expr {$sel+1}]
        # Not foreground, just focus
        FocusN $i false
    }
}

# --- utilities ---

proc GetHeight {} {
    global windowSize
    lindex $windowSize 1
}
proc GetWidth {} {
    global windowSize
    lindex $windowSize 0
}

proc GetX {} {
    global pos
    lindex $pos 0
}

proc GetY {} {
    global pos
    lindex $pos 1
}

# Does square first 4 windows
proc UpdatePos {} {
    global i pos
    set x [GetX]
    set y [GetY]
    Debug "x=$x y=$y"
    if {$i % 2} {
        incr y [GetHeight]
        Debug "incr y now $y"
    } else {
        set w [GetWidth]
        if {$i eq 4} {
            set w -$w
        }
        incr x $w
        Debug "incr x now $x"
    }
    set pos "$x $y"
}


# --- Windows API: https://twapi.magicsplat.com/v4.4/ui.html

proc FindWow {} {
    set w [twapi::find_windows -text "World of Warcraft" -visible true -single]
    return $w
}

proc Resize {w width height} {
    Debug "Resizing $w to $width x $height"
    twapi::resize_window $w $width $height
}

proc RenameResize {w name} {
    Resize $w [GetWidth] [GetHeight]
    twapi::set_window_text $w $name
}

proc Move {w x y} {
    Debug "Moving $w to $x , $y"
    twapi::move_window $w $x $y
}

proc FindExisting {} {
    global i ww
    set n 1
    while {1} {
        set wname "Wow $n"
        set w [twapi::find_windows -match regexp -text "^$wname\$" -visible true -single]
        if {$w eq ""} {
            Debug "wow $n not found, stopping"
            return
        }
        Debug "found Wow $n!"
        updateListBox $n $w $wname
        incr n 1
    }
}

proc Update {wh x y w h} {
    Resize $wh $w $h
    Move $wh $x $y
}

proc Focus {wh} {
    twapi::set_focus $wh
}

proc Foreground {wh} {
    twapi::set_foreground_window $wh
}

proc Help {} {
    global vers
    twapi::shell_execute -path https://www.wowopenbox.org/help?v=$vers
}

proc EditSettings {} {
    global SETTINGS_FILE
    Debug "Edit settings requested"
    twapi::shell_execute -path notepad.exe -params $SETTINGS_FILE
    .b1 configure -text "Reload Settings" -command LoadSettings
}

# ---

# wow windows handles
array set ww {}

proc FocusN {n fg} {
    global ww
    if {![info exists ww($n)]} {
       Debug "FocusN $n called but no such window"
    }
    Debug "FocusN $n called, found window"
    Focus $ww($n)
    if {$fg} {
        Debug "Also making $n foreground"
        Foreground $ww($n)
    }
}

proc UpdateN {n} {
    global ww settings
    if {![info exists ww($n)]} {
        Debug "Can't update non existent window $n"
        return
    }
    if {![info exists settings($n,posXY)]} {
        Debug "Can't update window $n without settings"
        return
    }
    set pos $settings($n,posXY)
    set size $settings($n,size)
    Update $ww($n) [lindex $pos 0] [lindex $pos 1] [lindex $size 0] [lindex $size 1]
}

proc Swap {n1 n2} {
    global ww settings
    Debug "Swap $n1<->$n2 called"
    set tmp $ww($n2)
    set ww($n2) $ww($n1)
    set ww($n1) $tmp
    UpdateN $n1
    UpdateN $n2
}

proc Capture {} {
    global i maxI settings
    set w [FindWow]
    if {$w eq ""} {
        tk_messageBox -type ok -icon error -title "WoW Open Box Error" -message "No World of Warcraft window found"
        return
    }
    set wname "WoW $i"
    RenameResize $w $wname
    Move $w [GetX] [GetY]
    updateListBox $i $w $wname
}

proc updateListBox {n w wname} {
    global ww i maxI settings
    set ww($n) $w
    if {[info exists settings(hk$n,focus)]} {
        Debug "Setting focus hotkey for $n / $wname: $settings(hk$n,focus)"
        twapi::register_hotkey $settings(hk$n,focus) [list FocusN $n true]
    } else {
        Debug "No focus hotkey found or set for $n / $wname"
    }
    if {[info exists settings(hk$n,swap)]} {
        Debug "Setting swap hotkey for $n / $wname: $settings(hk$n,swap)"
        twapi::register_hotkey $settings(hk$n,swap) [list Swap 1 $n]
    } else {
        Debug "No focus hotkey found or set for $n / $wname"
    }
    # 0 based index
    set i0 [expr {$n-1}]
    Debug "n is $n i is $i maxI is $maxI"
    if {$n<$maxI} {
        .lbw see $i0
        return
    }
    # jump by more than 1
    for {set j $maxI} {$j < $n} {incr j} {
        .lbw insert end "WoW $j*"
    }
    .lbw insert $i0 $wname
    set i [expr {$n+1}]
    set maxI $i
}

proc CaptureOrUpdate {} {
    global i ww settings
    Debug "Capturing/updating $i"
    set settings($i,posXY) "[GetX] [GetY]"
    set settings($i,size) "[GetWidth] [GetHeight]"
    if {![info exists ww($i)]} {
        Capture
    } else {
        UpdateN $i
    }
    SaveSettings
}


proc WindowLayout {} {
    tk_messageBox -type ok -icon info -title "WoW Open Box Message" -message "Not implemented yet!"
}

# --- Mouse follow focus and raise control

proc GetMouseDelay {} {
    twapi::get_system_parameters_info SPI_GETACTIVEWNDTRKTIMEOUT
}

proc SetMouseDelay {v} {
    twapi::set_system_parameters_info SPI_SETACTIVEWNDTRKTIMEOUT $v
}

proc GetFocusFollowMouse {} {
    twapi::get_system_parameters_info SPI_GETACTIVEWINDOWTRACKING
}

proc SetFocusFollowMouse {v} {
    twapi::set_system_parameters_info SPI_SETACTIVEWINDOWTRACKING $v
}

proc GetMouseRaise {} {
    twapi::get_system_parameters_info SPI_GETACTIVEWNDTRKZORDER
}

proc SetMouseRaise {v} {
    twapi::set_system_parameters_info SPI_SETACTIVEWNDTRKZORDER $v
}

# -- sync with widget values

proc UpdateMouseFollow {} {
    global mouseFollow
    SetFocusFollowMouse $mouseFollow
}

proc UpdateMouseRaise {} {
    global mouseRaise
    SetMouseRaise $mouseRaise
}

proc UpdateMouseDelay {} {
    global mouseDelay
    SetMouseDelay $mouseDelay
}
# --- Embed tkcon console

set consoleSetup false

proc ConsoleSetup {} {
    global consoleSetup appsDir
    if {$consoleSetup} {
        return
    }
    set bindir [file dirname [info nameofexecutable]]
    set appsDir [file join $bindir "../apps/"]
    Debug "Apps dir is $appsDir"
    uplevel #0 {
        source [file join $appsDir "tkcon.tcl"]
        package require tkcon
        set ::tkcon::PRIV(showOnStartup) 0
        set ::tkcon::PRIV(root) .console
        set ::tkcon::PRIV(protocol) {tkcon hide}
        #set tkcon::PRIV(name) "Wow Open Box"
        set ::tkcon::OPT(exec) ""
        tkcon::Init
        tkcon title "Wow Open Box console"
    }
    set consoleSetup true
}
# --- done with console


#---- settings and initial setup
# globals
if {![info exists pos]} {
    # position of the next move window
    set pos "0 0"
    # size to set
    set windowSize "1920 1080"
    # debug on/off
    set settings(DEBUG) 0
    # start from slot 1
    # "next" window/slot #
    set i 1
    # max ever set in list box
    set maxI 1
}
# default hotkeys (change in you ~/.wowopenbox.tcl)
for {set n 1} {$n<=12} {incr n} {
    set settings(hk$n,focus) "Ctrl-f$n"
    set settings(hk$n,swap) "Ctrl-Shift-f$n"
}

set settings(hk,capture) "Ctrl-Shift-C"
set settings(hk,mouseTrack) "Ctrl-Shift-M"

LoadSettings

# -- get/save sequence
trace add variable i write updateIndex

# wip for layouts
Debug "desktop workarea [twapi::get_desktop_workarea]"
Debug "display monitors [twapi::get_display_monitors -activeonly]"
Debug "display info [twapi::get_multiple_display_monitor_info]"

# Make it so the code can be reloaded without errors
if {![winfo exists .logo]} {
    UISetup
    set mouseTrackOn ""
    updateIndex
    # Save settings once
    SaveSettings
}

# --- main / tweak me ---
puts "WowOpenBox $vers started..."
FindExisting
